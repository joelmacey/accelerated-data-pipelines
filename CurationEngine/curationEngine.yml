AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Creates the Curation Pipeline component of the Accelerated Data Pipeline.

Parameters:
  CurationFailureTopicName:
    Type: String
    Default: curation-failure
    Description: The SNS topic name to receive failure notifications
  CurationSuccessTopicName:
    Type: String
    Default: curation-success
    Description: The SNS topic name to receive successful notifications
  WaitPeriod:
    Default: 15
    Type: Number
    Description: The time to wait before polling the query execution status, in seconds
  QueryTimeout:
    Default: 30
    Type: Number
    Description: The time athena should wait before failing, in minutes
  EnvironmentPrefix:
    Type: String
    Description: Enter the environment prefix used for the Accelerated Data Pipeline, used to reference storage structure
    MinLength: 3
    MaxLength: 19
    AllowedPattern: "[a-z][a-z0-9-]+"

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: SNS Notifications
        Parameters:
          - CurationSuccessTopicName
          - CurationFailureTopicName

Resources:
# IAM Roles
  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"            
  
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${EnvironmentPrefix}accelerated-query-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: S3GetPutTag
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:HeadObject
                  - s3:ListAllMyBuckets
                  - s3:GetBucketLocation
                  - s3:ListBucketMultipartUploads
                  - s3:ListMultipartUploadParts
                  - s3:AbortMultipartUpload
                  - s3:ListBucket
                  - s3:GetObjectVersionTagging
                  - s3:GetObjectTagging
                  - s3:PutObjectTagging
                  - s3:PutObjectAcl
                Resource: "*"              
        - PolicyName: KMSBasic
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:Encrypt
                  - kms:PutKeyPolicy
                  - kms:GenerateDataKey
                Resource: "*"              
        - PolicyName: Logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "*"      
        - PolicyName: Glue
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - glue:GetDatabase
                  - glue:GetTable
                  - glue:GetPartition
                  - glue:GetPartitions
                Resource: "*"                          
        - PolicyName: DDBGetPutScan
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:GetShardIterator
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:ListStreams 
                  - dynamodb:UpdateItem
                  - dynamodb:DescribeStream
                  - dynamodb:UpdateTable
                  - dynamodb:GetRecords
                Resource: "*"
        - PolicyName: AthenaAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - athena:GetQueryExecution
                  - athena:GetQueryResults
                  - athena:ListQueryExecutions
                  - athena:StartQueryExecution
                  - athena:StopQueryExecution
                Resource: "*"
        - PolicyName: CodeCommit
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codecommit:GetBlob
                  - codecommit:GetFile
                  - codecommit:GetFolder
                  - codecommit:GetRepository
                  - codecommit:ListRepositories
                Resource: "*"
        - PolicyName: EventBridge
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - events:DeleteRule
                  - events:DescribeRule
                  - events:PutRule
                  - events:PutTargets
                  - events:RemoveTargets
                Resource: "*" 
# SNS Topics
  CurationSuccessSNS:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: SNS topic that curation success notifications are sent to.
      TopicName: !Sub "${EnvironmentPrefix}${CurationSuccessTopicName}" 
  
  CurationFailureSNS:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: SNS topic that curation failure notifications are sent to.
      TopicName: !Sub "${EnvironmentPrefix}${CurationFailureTopicName}" 

# Lambda Functions
  # Expected event: {"curationType": "sample_file"}
  StartCurationProcessing:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub "${EnvironmentPrefix}start-curation-processing"
      Handler: startCurationProcessing.lambda_handler
      Runtime: python3.6
      CodeUri: ./src/startCurationProcessing.py
      Description: Initiates the Curation Engine Processing Step Function.
      MemorySize: 128
      Timeout: 300
      Policies: 
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
        - DynamoDBCrudPolicy:
            TableName:
              Fn::ImportValue:
                !Sub "${EnvironmentPrefix}CurationDetailsTableName"
        - DynamoDBCrudPolicy:
            TableName:
              Fn::ImportValue:
                !Sub "${EnvironmentPrefix}CurationHistoryTableName"
      Environment:
        Variables:
          CURATION_DETAILS_TABLE_NAME: 
            Fn::ImportValue:
              !Sub "${EnvironmentPrefix}CurationDetailsTableName"
          CURATION_HISTORY_TABLE_NAME: 
            Fn::ImportValue:
              !Sub "${EnvironmentPrefix}CurationHistoryTableName"
          STEP_FUNCTION: !Ref CurationEngine
          SCRIPTS_REPO_NAME:
            Fn::ImportValue:
              !Sub "${EnvironmentPrefix}CodeCommitScriptsRepo-Name"
  
  CreateNewEventRule:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub "${EnvironmentPrefix}create-new-curation-event-rule"
      Handler: createNewEventRule.lambda_handler
      Runtime: python3.6
      CodeUri: ./src/createNewEventRule.py
      Description: Create a new event rule using the cron expression in the dynamodb entry.
      MemorySize: 128
      Timeout: 300
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Policies: 
        - DynamoDBCrudPolicy:
            TableName:
              Fn::ImportValue:
                !Sub "${EnvironmentPrefix}CurationDetailsTableName"
      Environment:
        Variables:
          START_CURATION_PROCESS_FUNCTION_ARN: !GetAtt StartCurationProcessing.Arn
  
  CurationDetailsStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1 # Trigger one lambda per document
      Enabled: True
      EventSourceArn: 
        Fn::ImportValue:
          !Sub "${EnvironmentPrefix}CurationDetailsStreamARN"
      FunctionName: !GetAtt CreateNewEventRule.Arn
      StartingPosition: LATEST # Subscribe from the tail of the stream
    DependsOn: LambdaExecutionRole
    
  RetrieveCurationDetails:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub "${EnvironmentPrefix}retrieve-curation-details"
      Handler: retrieveCurationDetails.lambda_handler
      Runtime: python3.6
      CodeUri: ./src/retrieveCurationDetails.py
      Description: Retrieves the details from the curation details dynamodb table.
      MemorySize: 128
      Timeout: 300
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Policies: 
        - DynamoDBCrudPolicy:
            TableName:
              Fn::ImportValue:
                !Sub "${EnvironmentPrefix}CurationDetailsTableName"
        
  ValidateDetails:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub "${EnvironmentPrefix}validate-details"
      Handler: validateDetails.lambda_handler
      Runtime: python3.6
      CodeUri: ./src/validateDetails.py
      Description: Validates details that are within the dynamodb entry.
      MemorySize: 128
      Timeout: 300
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
  
  StartQueryExecution:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub "${EnvironmentPrefix}start-query-execution"
      Handler: startQueryExecution.lambda_handler
      Runtime: python3.6
      CodeUri: ./src/startQueryExecution.py
      Description: Starts the query using the details from the dynamodb item.
      MemorySize: 128
      Timeout: 300
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
  
  GetQueryExecutionStatus:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub "${EnvironmentPrefix}get-query-execution-status"
      Handler: getQueryExecutionStatus.lambda_handler
      Runtime: python3.6
      CodeUri: ./src/getQueryExecutionStatus.py
      Description: Retrieves the status of the execution and the output location.
      MemorySize: 128
      Timeout: 300
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Environment:
        Variables:
          QUERY_TIMEOUT: !Ref QueryTimeout
  UpdateOutputDetails:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub "${EnvironmentPrefix}update-output-details"
      Handler: updateOutputDetails.lambda_handler
      Runtime: python3.6
      CodeUri: ./src/updateOutputDetails.py
      Description: Update the output file with details defined in the dynamodb item
      MemorySize: 128
      Timeout: 300
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
    
  RecordSuccessfulCuration:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub "${EnvironmentPrefix}record-successful-curation"
      Handler: recordSuccessfulCuration.lambda_handler
      Runtime: python3.6
      CodeUri: ./src/recordSuccessfulCuration.py
      Description: Records successful curatin in the curation histroy, and sends success SNS if configured.
      MemorySize: 128
      Timeout: 300
      Environment:
        Variables:
          SNS_SUCCESS_ARN: !Ref CurationSuccessSNS   
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              Fn::ImportValue:
                !Sub "${EnvironmentPrefix}CurationHistoryTableName"
        - SNSPublishMessagePolicy:
            TopicName: '*'

  RecordUnsuccessfulCuration:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub "${EnvironmentPrefix}record-unsuccessful-curation"
      Handler: recordUnsuccessfulCuration.lambda_handler
      Runtime: python3.6
      CodeUri: ./src/recordUnsuccessfulCuration.py
      Description: Records unsuccessful curation in the curation histroy, and sends failure SNS if configured.
      MemorySize: 128
      Timeout: 300
      Environment:
        Variables:
          SNS_FAILURE_ARN: !Ref CurationFailureSNS   
      Policies:
        - DynamoDBCrudPolicy:
            TableName: 
              Fn::ImportValue:
                !Sub "${EnvironmentPrefix}CurationHistoryTableName"
        - SNSPublishMessagePolicy:
            TopicName: '*'

# Step Function State Machine Definition
  CurationEngine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "${EnvironmentPrefix}curationengine" 
      DefinitionString: !Sub 
        - |-
          {
            "Comment": "State machine to curate the data available in the data lake",
            "StartAt": "RetrieveCurationDetails",
            "States": {
              "RetrieveCurationDetails": {
                "Type": "Task",
                "Resource": "${RetrieveCurationDetailsArn}",
                "Comment": "Retrieves the details that are within the dynamodb entry.",
                "Next": "ValidateDetails",
                "Catch": [
                  {
                    "ErrorEquals": ["RetrieveCurationDetailsException","Exception"],
                    "ResultPath": "$.error-info",
                    "Next": "RecordUnsuccessfulCuration"
                  }
                ],
                "Retry" : [
                  {
                    "ErrorEquals": [
                      "Lambda.Unknown",
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 4,
                    "BackoffRate": 1.5
                  },
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 4,
                    "BackoffRate": 1.5
                  }
                ]
              },

              "ValidateDetails": {
                "Type": "Task",
                "Resource": "${ValidateDetailsArn}",
                "Comment": "Validates the details that are within the dynamodb entry.",
                "Next": "StartQueryExecution",
                "Catch": [
                  {
                    "ErrorEquals": ["ValidateDetailsException","Exception"],
                    "ResultPath": "$.error-info",
                    "Next": "RecordUnsuccessfulCuration"
                  }
                ],
                "Retry" : [
                  {
                    "ErrorEquals": [
                      "Lambda.Unknown",
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 4,
                    "BackoffRate": 1.5
                  },
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 4,
                    "BackoffRate": 1.5
                  }
                ]
              }, 

              "StartQueryExecution": {
                "Type": "Task",
                "Resource": "${StartQueryExecutionArn}",
                "Comment": "Starts the query using the details from the dynamodb item.",
                "Next": "Wait",
                "Catch": [
                  {
                    "ErrorEquals": ["StartQueryExecutionException","Exception"],
                    "ResultPath": "$.error-info",
                    "Next": "RecordUnsuccessfulCuration"
                  }
                ],
                "Retry" : [
                    {
                      "ErrorEquals": [
                        "Lambda.Unknown",
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 4,
                      "BackoffRate": 1.5
                    },
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 4,
                      "BackoffRate": 1.5
                    }
                ]
              }, 

              "Wait": {
                "Type": "Wait",
                "Seconds": ${WaitPeriod},
                "Next": "GetQueryExecutionStatus"
              },
              
              "GetQueryExecutionStatus": {
                "Type": "Task",
                "Resource": "${GetQueryExecutionStatusArn}",
                "Comment": "Retrieves the status of the execution and the output location.",
                "Next": "HandleStatus",
                "Catch": [
                  {
                    "ErrorEquals": ["StartQueryExecutionException","Exception"],
                    "ResultPath": "$.error-info",
                    "Next": "RecordUnsuccessfulCuration"
                  }
                ],
                "Retry" : [
                  {
                    "ErrorEquals": [
                      "Lambda.Unknown",
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 4,
                    "BackoffRate": 1.5
                  },
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 4,
                    "BackoffRate": 1.5
                  }
                ]
              }, 
           
              "HandleStatus": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.queryDetails.queryStatus",
                    "StringEquals": "SUCCEEDED",
                    "Next": "UpdateOutputDetails"
                  },
                  {
                    "Variable": "$.queryDetails.queryStatus",
                    "StringEquals": "FAILED",
                    "Next": "RecordUnsuccessfulCuration"
                  }
                ],
                "Default": "GetQueryExecutionStatus"
              },  
              "UpdateOutputDetails": {
                "Type": "Task",
                "Resource": "${UpdateOutputDetailsArn}",
                "Comment": "Update the output file with details defined in the dynamodb item.",
                "Next": "RecordSuccessfulCuration",
                "Catch": [
                  {
                    "ErrorEquals": ["StartQueryExecutionException","Exception"],
                    "ResultPath": "$.error-info",
                    "Next": "RecordUnsuccessfulCuration"
                  }
                ],
                "Retry" : [
                  {
                    "ErrorEquals": [
                      "Lambda.Unknown",
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 4,
                    "BackoffRate": 1.5
                  },
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 4,
                    "BackoffRate": 1.5
                  }
                ]
              },
              "RecordSuccessfulCuration": {
                "Type": "Task",
                "Resource": "${RecordSuccessfulCurationArn}",
                "Comment": "Records successful curatin in the curation history, and sends success SNS if configured.",
                "Next": "FinishedProcessingSuccessfulFile",
                "Catch": [
                  {
                    "ErrorEquals": ["RecordSuccessfulCurationException","Exception"],
                    "ResultPath": "$.error-info",
                    "Next": "FinishedProcessingUnsuccessfulFile"
                  }
                ],
                "Retry" : [
                  {
                    "ErrorEquals": [
                      "Lambda.Unknown",
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 4,
                    "BackoffRate": 1.5
                  },
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 4,
                    "BackoffRate": 1.5
                  }
                ]
              },
              "RecordUnsuccessfulCuration": {
                "Type": "Task",
                "Resource": "${RecordUnsuccessfulCurationArn}",
                "Comment": "Records unsuccessful curatin in the curation history, and sends failure SNS if configured.",
                "Next": "FinishedProcessingUnsuccessfulFile",
                "Catch": [
                  {
                    "ErrorEquals": ["RecordUnsuccessfulCurationException","Exception"],
                    "ResultPath": "$.error-info",
                    "Next": "FinishedProcessingUnsuccessfulFile"
                  }
                ],
                "Retry" : [
                  {
                    "ErrorEquals": [
                      "Lambda.Unknown",
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 4,
                    "BackoffRate": 1.5
                  },
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 4,
                    "BackoffRate": 1.5
                  }
                ]
              },

              "FinishedProcessingUnsuccessfulFile": {
                "Type": "Pass",
                "Result": "Fail",
                "End": true
              },

              "FinishedProcessingSuccessfulFile": {
                "Type": "Pass",
                "Result": "Success",
                "End": true
              }
            }
          }
          
        - RetrieveCurationDetailsArn: !GetAtt [RetrieveCurationDetails, Arn]
          ValidateDetailsArn: !GetAtt [ValidateDetails, Arn]
          StartQueryExecutionArn: !GetAtt [StartQueryExecution, Arn]
          GetQueryExecutionStatusArn: !GetAtt [GetQueryExecutionStatus, Arn]
          UpdateOutputDetailsArn: !GetAtt [UpdateOutputDetails, Arn]
          RecordSuccessfulCurationArn: !GetAtt [RecordSuccessfulCuration, Arn]
          RecordUnsuccessfulCurationArn: !GetAtt [RecordUnsuccessfulCuration, Arn]
          WaitPeriod: !Ref WaitPeriod
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]